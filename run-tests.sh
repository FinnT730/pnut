#!/bin/bash

if [ $# -lt 2 ]; then
  echo "Usage: $0 <backend> {clean|test}"
  exit 1
fi

backend=$1
action=$2
pnut_source="pnut.c"
pnut_exe="./pnut.exe"

# Check if the pnut_source is a valid file
if [ ! -f "$pnut_source" ]; then
  echo "Error: $pnut_source is not a valid file."
  exit 1
fi

# Compile pnut.c with the specified backend
echo "Compiling $pnut_source with backend $backend..."
gcc "$pnut_source" "$backend" -o "$pnut_exe"
if [ $? -ne 0 ]; then
  echo "Error: Failed to compile $pnut_source with $backend"
  exit 1
fi

# Determine the file extension based on the backend
case "$backend" in
  -Dsh)
    ext="sh"
    ;;
  -Di386 | -Dx86_64)
    ext="exe"
    ;;
  *)
    echo "Unknown backend: $backend"
    exit 1
    ;;
esac

# Function to clean generated files
clean() {
    rm -f out.sh
    rm -f "tests/*.$ext" tests/*.err tests/*.gcc.exe pnut.exe tests/*.output tests/*.golden
}

# Function to run tests
test() {
    echo "Running tests..."

    for file in $(find tests -type f -name "*.c" | sort); do
        filename=$(basename "$file" .c)

        # Generate golden file using gcc
        gcc "$file" -o "tests/$filename.gcc.exe"
        if [ $? -eq 0 ]; then
            ./tests/"$filename.gcc.exe" > "tests/$filename.golden"
            echo "$filename: ✅ Golden file generated by gcc"
            rm -f "tests/$filename.gcc.exe"
        else
            echo "$filename: ❌ Failed to compile with gcc"
            continue
        fi

        # Compile the test file with pnut.exe
        "$pnut_exe" < "$file" > "tests/$filename.$ext" 2> "tests/$filename.err"
        if [ $? -eq 0 ]; then
            chmod +x "tests/$filename.$ext"
            ./tests/"$filename.$ext" > "tests/$filename.output" 2> "tests/$filename.err"
            if [ $? -eq 0 ]; then
                diff_out=$(diff "tests/$filename.output" "tests/$filename.golden")
                if [ $? -eq 0 ]; then
                    echo "$filename: ✅ Test passed"
                    rm -f "tests/$filename.$ext" # Clean up the executable if the test passed
                else
                    echo "$filename: ❌ Test failed"
                    echo "diff (output vs expected)"
                    echo "$diff_out"
                fi
            else
                echo "$filename: ❌ Failed to run: $(cat tests/$filename.err)"
            fi
            rm -f "tests/$filename.output"
        else
            echo "$filename: ❌ Failed to compile with pnut: $(cat tests/$filename.err)"
        fi
        rm -f "tests/$filename.err"
    done
}

# Determine action to perform
case "$action" in
  clean)
    clean
    ;;
  test)
    test
    ;;
  *)
    echo "Usage: $0 <backend> {clean|test}"
    exit 1
    ;;
esac
