#!/bin/sh
#
# Run tests for pnut using different backends
# Usage: ./run-tests.sh <backend> --match pattern --bootstrap
# The backend can be one of the following: sh, i386, x86_64, mac_os
# The --match flag is used to run tests that match the given pattern, useful for re-running failed tests
# The --bootstrap flag compiles the tests using pnut compiled with pnut, useful for catching bootstrap errors

fail() { echo "$1"; exit "$2"; }

if [ $# -lt 1 ]; then
  fail "Usage: $0 <backend> -m pattern --bootstrap" 1
fi

# Parse the arguments
backend=$1; shift
bootstrap=0
pattern=".*"
while [ $# -gt 0 ]; do
  case $1 in
    --match) pattern="$2"; shift 2;;
    --bootstrap) bootstrap=1; shift;;
    *) echo "Unknown option: $1"; exit 1;;
  esac
done

# Determine the file extension based on the backend
case "$backend" in
  sh)
    ext="sh"
    ;;
  i386 | x86_64 | mac_os)
    ext="exe"
    ;;
  *)
    echo "Unknown backend: $backend"
    exit 1
    ;;
esac

# Compile pnut, either using gcc or with pnut itself
# pnut_comp is set to the compiled pnut executable
compile_pnut() {
  pnut_source="pnut.c"
  pnut_exe="./tests/pnut-by-gcc.exe"
  pnut_exe_backend="./tests/pnut.$ext"

  echo "Compiling $pnut_source with $backend backend..."
  gcc "$pnut_source" "-D$backend" -DRT_NO_INIT_GLOBALS -o "$pnut_exe" 2> /dev/null || fail "Error: Failed to compile $pnut_source with $backend"
  if [ "$bootstrap" -eq 1 ]; then
    "$pnut_exe" "-D$backend" -DRT_NO_INIT_GLOBALS "$pnut_source" > "$pnut_exe_backend" || fail "Error: Failed to compile $pnut_source with $pnut_exe (bootstrap)"
    chmod +x "$pnut_exe_backend"
    pnut_comp="$pnut_exe_backend"
  else
    pnut_comp="$pnut_exe"
  fi
}

# Function to run tests
run_tests() {
  echo "Running tests..."
  passed_tests="" # List of passed tests separated by newline
  failed_tests="" # List of failed tests separated by newline

  for file in $(find tests -type f -name "*.c" | sort | grep -E "$pattern"); do
    filename=$(basename "$file" .c) # Get the filename without extension
    dir=$(dirname "$file") # Get the directory of the test file

    golden_file="$dir/$filename.golden"

    # Print file name before generating golden file so we know it's getting processed
    printf "$file: "

    # Generate golden file using pnut only if it doesn't exist
    if [ ! -f "$golden_file" ]; then
      "$pnut_comp" "$file" > "$dir/$filename.golden.$ext" 2> "$dir/$filename.err"
      if [ $? -eq 0 ]; then
        chmod +x "$dir/$filename.golden.$ext"
        "./$dir/$filename.golden.$ext" > "$golden_file"
        echo "üü° Golden file generated by pnut"
        continue
      else
        echo "‚ùå Failed to compile with pnut"
        failed_tests="${failed_tests}\n${file}"
        continue
      fi
    fi

    # Compile the test file with pnut.exe
    "$pnut_comp" "$file" > "$dir/$filename.$ext" 2> "$dir/$filename.err"
    if [ $? -eq 0 ]; then # If compilation was successful
      chmod +x "$dir/$filename.$ext"
      "./$dir/$filename.$ext" > "$dir/$filename.output" 2> "$dir/$filename.err"
      if [ $? -eq 0 ]; then # If the executable ran successfully
          diff_out=$(diff "$dir/$filename.output" "$dir/$filename.golden")
          if [ $? -eq 0 ]; then # If the output matches the golden file
            echo "‚úÖ Test passed"
            passed_tests="${passed_tests}\n${file}"
          else
            echo "‚ùå Test failed"
            echo "diff (output vs expected)"
            echo "$diff_out"
            failed_tests="${failed_tests}\n${file}"
          fi
        else
          echo "‚ùå Failed to run: $(cat "$dir/$filename.err")"
          failed_tests="${failed_tests}\n${file}"
        fi
    else
      echo "‚ùå Failed to compile with pnut: $(cat "$dir/$filename.err")"
      failed_tests="${failed_tests}\n${file}"
    fi
  done

  echo "Summary:"
  echo "===================="
  echo "Passed: $(printf "$passed_tests" | wc -l)"
  echo "Failed: $(printf "$failed_tests" | wc -l)"

  if [ -n "$failed_tests" ]; then
    for file in $(printf "$failed_tests"); do
      printf " - %s\n" "$file"
    done
  fi
}

compile_pnut
run_tests "$pattern"
